{
  "general": {
    "cardBalance": "Баланс",
    "available": "Доступно",
    "latestsTransactions": "Последние транзакции",
    "dailyPoints": "Днвные очки",
    "noPaymentDue": "Нет платежа",
    "paidBalance": "Вы оплатили свой баланс",
    "status": "Статус",
    "total": "Всего",
    "currentLanguage": "Русский",
    "greet": "Добро пожаловать, {{login}}!",
    "admin": "Админ",
    "manager": "Менеджер",
    "project": "Проект",
    "noData": "Нет данных",
    "allTheTime": "Все время",
    "24hours": "24 часа",
    "week": "Неделя",
    "month": "Месяц",
    "send": "Отправить",
    "index": "Индекс",
    "start": "Старт",
    "stop": "Стоп",
    "end": "Конец",
    "duration": "Продолжительность",
    "inProgress": "В процессе",
    "of": "из",
    "go": "Перейти",
    "page": "Страница",
    "timestamp": "Метка времени",
    "responses": "Ответы",
    "requests": "Запросы",
    "toMain": "В главное меню",
    "contactSupport": "Связаться с поддержкой",
    "report": "Отчёт",
    "table": "Таблица",
    "chart": "График"
  },
  "amountForm": {
    "header": "Форма параллелизма (RTKQ)",
    "footerText": ""
  },
  "somethingWrong": {
    "header": "Что-то пошло не так"
  },

  "landing": {
    "project": {
      "title": "Тестовое задание 'Get Report Wallet'",
      "description": "Проект реализует клиент-серверную логику для асинхронных запросов транзакций с сервера.",
      "button": "Начать!"
    },
    "stack": {
      "title": "Технологический Стек",
      "descriptions": {
        "react": "Библиотека JS для создания пользовательских интерфейсов.",
        "vite": "Инструмент для быстрой разработки веб-приложений.",
        "ts": "Типизированное надмножество.",
        "rtkq": "Полнофункциональный набор инструментов для эффективной разработки.",
        "mui": "Фреймворк, реализующий Material Design от Google.",
        "styled": "Библиотека для стилизации React-приложений.",
        "git": "Система контроля версий.",
        "githubActions": "Платформа CI/CD.",
        "aws": "Комплексная облачная платформа.",
        "terraform": "Инструмент для инфраструктуры как кода."
      }
    },
    "contact": {
      "title": "Связаться с разработчиком",
      "description": "Заинтересованы в сотрудничестве или есть вопросы по этому проекту?"
    },
    "features": { "title": "Особенности Проекта" }
  },
  "authForm": {
    "login": {
      "header": "Вход",
      "button": "Войти",
      "footerText": "Нужно создать аккаунт?",
      "footerLink": "Регистрация"
    },
    "register": {
      "header": "Регистрация",
      "button": "Зарегистрироваться",
      "footerText": "Уже есть аккаунт? ",
      "footerLink": "Вход"
    }
  },
  "pages": {
    "dashboard": {
      "index": "Панель управления"
    },
    "statistics": {
      "index": "Статистика"
    }
  },
  "fields": {
    "login": "Логин",
    "password": "Пароль",
    "email": "Электронная почта",
    "phone": "Телефон",
    "message": "Сообщение"
  },
  "toasts": {
    "login": { "success": "Успешный вход!", "error": "Ошибка входа" }
  },
  "validationMessages": {
    "login": {
      "empty": "Логин обязателен",
      "min": "Логин должен быть не менее 3 символов"
    },
    "password": {
      "empty": "Пароль обязателен",
      "min": "Пароль должен быть не менее 8 символов"
    }
  },
  "features": {
    "rtkq": "В этом проекте был реализован `RTK Query` для упрощения взаимодействия с API, повышения эффективности и ясности в управлении запросами.",
    "terraform": "Разработана и развернута клиентская инфраструктура на AWS с использованием `Terraform`, включая `S3` для хостинга статических сайтов, `ACM` для SSL/TLS-сертификатов, `Route 53` для управления DNS и `CloudFront` в качестве CDN, что обеспечивает безопасную, быструю и масштабируемую доставку контента, полностью автоматизированную для повышения согласованности и эффективности.",
    "materialUI": "Использован для создания пользовательского интерфейса с компонентами `Material Design`, обеспечивая современный, удобный и настраиваемый интерфейс.",
    "reduxToolkit": "Упрощает управление состоянием в приложении с удобными функциями для работы с `Redux`.",
    "cognito": "`Cognito` — это сервис аутентификации, авторизации и управления пользователями от AWS. Он упрощает процесс добавления регистрации, входа в систему и управления доступом для веб- и мобильных приложений. `Cognito` легко интегрируется с другими сервисами AWS, что делает его мощным выбором для облачных приложений.",
    "lambda": "`Lambda` — это бессерверный сервис вычислений, который позволяет запускать код без необходимости настройки или управления серверами. Код выполняется только при срабатывании событий, и вы платите только за использованное время вычислений — без затрат, если код не выполняется.",
    "apiGetaway": "`API Gateway` — это полностью управляемый сервис, позволяющий разработчикам создавать, публиковать, поддерживать, отслеживать и защищать API любого масштаба. Он служит входной точкой к вашим приложениям, позволяя клиентам взаимодействовать с вашими серверными сервисами, такими как `AWS Lambda`, `EC2`, `DynamoDB` или любой другой HTTP-эндпоинт.",
    "reactRouter": "`React Router` — популярная библиотека для управления маршрутизацией в приложениях на React. Она позволяет навигацию между различными представлениями или компонентами в одностраничном приложении (SPA) без перезагрузки всей страницы. `React Router` предоставляет декларативный способ определения и управления маршрутами в приложении React, упрощая контроль над навигацией пользователей.",
    "formik": "`Formik` — популярная библиотека для работы с формами в приложениях React. Она упрощает создание, валидацию и отправку форм, предоставляя утилиты для управления состоянием форм, обработки ввода пользователей и интеграции с библиотеками валидации. `Formik` уменьшает объем шаблонного кода, необходимого для работы с формами, и делает их использование более удобным.",
    "zod": "`Zod` — библиотека валидации схем, ориентированная на TypeScript. Она позволяет определять и проверять структуру данных с использованием схем. `Zod` особенно хорошо подходит для проверки входных данных, включая данные форм, запросы к API и другие структуры данных в приложениях на JavaScript/TypeScript. Она разработана для обеспечения высокой безопасности типов, что позволяет вашим типам TypeScript и логике валидации оставаться синхронизированными без сложных преобразований типов.",
    "toastify": "Библиотека для уведомлений, упрощающая отображение сообщений пользователям.",
    "learnMore": "Узнать больше"
  }
}
